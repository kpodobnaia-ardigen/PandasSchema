import typing
import pandas as pd

from . import validation_df
from .validation_warning import ValidationWarning


class Column:
    def __init__(self, name: str, validations: typing.Iterable['validation_df._BaseValidation'] = [], allow_empty=False):
        """
        Creates a new Column object

        :param name: The column header that defines this column.
                     This must be identical to the header used in the Data Frame you are validating.
        :param validations: An iterable of objects implementing _BaseValidation that will generate ValidationErrors
        :param allow_empty: True if an empty column is considered valid.
                            False if we leave that logic up to the Validation
        """
        self.name = name
        self.validations = list(validations)

        if not allow_empty:
            # TODO: add validation for empty values to self.validations
            pass

    def validate(self, df: pd.DataFrame) -> typing.List[ValidationWarning]:
        """
        Creates a list of validation errors using the Validation objects contained in the Column

        :param df: A pandas Series to validate
        :return: An iterable of ValidationError instances generated by the validation
        """
        errors = []
        column = df[[self.name]]

        for validation in self.validations:
            errors += validation.get_errors(column)

        return errors
